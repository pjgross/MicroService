openapi: 3.0.3
info:
  title: tickets service
  description: Specification for tickets service REST api
  termsOfService: http://ticketing.dev/terms/
  contact:
    name: Peter Gross
    url: https://www.linkedin.com/in/peter-gross-b435869/
    email: pjgro66@gmail.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: "1.0"
servers:
  - url: http://ticketing.dev
    description: Development Server
  - url: http://www.relman.xyz
    description: QA Server
  - url: https://www.relman.com
    description: Production Server
paths:
  /api/tickets:
    get:
      tags:
        - Tickets
      summary: List Tickets
      description: Get a list of the tickets in the system
      responses:
        200:
          description: List of Tickets
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TicketList"
      security: []
    post:
      tags:
        - Tickets
      summary: New Ticket
      description: Create a new ticket
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Ticket"
        required: true
      responses:
        201:
          description: Ticket Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ticket"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorBody"
      security:
        - cookieAuth: []
  /api/tickets/{id}:
    get:
      tags:
        - Tickets
      summary: Get Ticket By ID
      description: Get a single **Ticket** by its Id value.
      parameters:
        - name: id
          in: path
          description: Ticket Id
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Found Ticket
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ticket"
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorBody"
      security: []
    put:
      tags:
        - Tickets
      summary: Update Ticket
      description: Update ticket by id.
      parameters:
        - name: id
          in: path
          description: Ticket Id
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Ticket"
        required: true
      responses:
        204:
          description: Ticket Updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ticket"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorBody"
        401:
          description: Not authorised
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorBody"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorBody"
      security:
        - cookieAuth: []
  /api/tickets/healthz:
    get:
      tags:
        - Tickets
      description: Health Check
      responses:
        200:
          description: Order Created
          content:
            application/json:
              schema:
                type: string
components:
  schemas:
    Ticket:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          example: 5f8898f22b11b50024d5b084
        title:
          type: string
          example: concert
        price:
          type: number
          format: float
        userId:
          type: string
          format: uuid
          readOnly: true
          example: 5f8898f22b11b50024d5b084
        version:
          type: integer
          format: int32
          readOnly: true
      description: ticket object
    TicketList:
      type: array
      description: List of Tickets
      items:
        $ref: "#/components/schemas/Ticket"
    ErrorBody:
      type: object
      description: Body of the error response
      properties:
        errors:
          $ref: "#/components/schemas/ErrorList"
    ErrorList:
      type: array
      description: List of Errors
      items:
        $ref: "#/components/schemas/Error"
    Error:
      type: object
      properties:
        message:
          type: string
          example: Price must be greater than zero
        field:
          type: string
          example: price
    PagedResponse:
      type: object
      properties:
        pageable:
          $ref: "#/components/schemas/PagedResponse_pageable"
        totalPages:
          type: integer
          format: int32
        last:
          type: boolean
        totalElements:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        number:
          type: integer
          format: int32
        numberOfElements:
          type: integer
          format: int32
        sort:
          $ref: "#/components/schemas/PagedResponse_pageable_sort"
        first:
          type: boolean
    PagedResponse_pageable_sort:
      type: object
      properties:
        sorted:
          type: boolean
        unsorted:
          type: boolean
    PagedResponse_pageable:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/PagedResponse_pageable_sort"
        offset:
          type: integer
          format: int32
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        paged:
          type: boolean
        unpaged:
          type: boolean
  parameters:
    PageNumberParam:
      name: pageNumber
      in: query
      description: Page Number
      required: false
      style: form
      explode: true
      schema:
        type: integer
        format: int32
        default: 1
    PageSizeParam:
      name: pageSize
      in: query
      description: Page Size
      required: false
      style: form
      explode: true
      schema:
        type: integer
        format: int32
        default: 25
  securitySchemes:
    cookieAuth:
      description: >-
        Session key to identify user session.
      type: apiKey
      in: cookie
      name: express:sess
